<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>CD2020</h1>
<h4>Create Portable Programming System for Windows 10</h4>
<p>在可攜系統目錄下先創一個 data 目錄</p>
<p><span>PortableGit：<br/><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> 下載 64-bit Git for Windows Portable 安裝在 data 目錄下</span></p>
<p><span>MSYS2：<br/><a href="https://www.msys2.org/">https://www.msys2.org/</a> 下載 msys2-x86_64-20190524.exe 並安裝在 data/msys64 的目錄下<br/><a href="https://www.scintilla.org/SciTEDownload.html">https://www.scintilla.org/SciTEDownload.html</a> 下載 full 64-bit download，解壓縮檔案至 data/wscite432，就是可以直</span></p>
<p><span>python3.8.1：<br/></span><a class="link" href="https://www.python.org/downloads/windows/" rel="nofollow noopener noreferrer" target="_blank">https://www.python.org/downloads/windows/</a><span><span> </span>下載 Download Windows x86-64 executable installer 準備安裝 3.8.2 python 解譯器，安裝完成後將完整資料放在 data/py381目錄底下</span></p>
<p><span>SciTE：接執行的 Scite.exe 編輯器，若希望以 UtF-8 編碼開啟文件，就必須啟用 Options 下拉式功能表中的 Global Options File（同 SciTEGlobal.properties 檔案）其中的預設值 code.page=0 （為Windows 內定的 Big-5 編碼）修改設定為 code.page=65001，表示使用使UTF-8 編碼</span></p>
<p><span>Tiny C Compiler：<br/></span><span><a href="https://github.com/TinyCC/tinycc">https://github.com/TinyCC/tinycc</a> git clone 整個倉儲到 data 目錄下並命名目錄為 tcc</span></p>
<p><span>Jupyterlab：<br/><a href="https://github.com/jupyterlab/jupyterlab">https://github.com/jupyterlab/jupyterlab</a> pip install jupyterlab==2.0.1 自動執行安裝</span></p>
<p><span>Fossil SCM：<a href="https://www.fossil-scm.org/">https://www.fossil-scm.org/</a> 下載 fossil scm 解壓縮後將 fossil.exe 放到 data 目錄下</span></p>
<p><span>Flutter：<a href="https://github.com/flutter/flutter">https://github.com/flutter/flutter </a> (在 data 目錄底下 git clone https://github.com/flutter/flutter.git -b stable)<br/></span></p>
<p><span>Visual Studio Code：<a href="https://github.com/microsoft/vscode">https://github.com/microsoft/vscode</a> (目前是先安裝，安裝完成後把資料放 data/vscode 目錄下)</span></p>
<p>home/home_mdecourse：存放 ssh 的資料</p>
<p>tmp：放 clone 下來的倉儲</p>
<p>ShareX：<a href="https://getsharex.com/downloads/">https://getsharex.com/downloads/</a></p>
<p>putty：<a href="http://mde.tw/cp2019/content/USB%20%E7%A8%8B%E5%BC%8F%E7%B3%BB%E7%B5%B1.html">老師整理的 putty</a> 或 <a href="https://github.com/s40723150/cd2020/raw/master/downloads/putty.7z">個人整理的 putty.7z</a></p>
<p>start.bat</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
set USERPROFILE=%Disk%:\home

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\py381\DLLs;%Disk%:\py381\Lib;%Disk%:\py381\Lib\site-packages;
set PYTHONHOME=%Disk%:\py381

#REM for putty
#Set GIT_HOME=%CDisk%:\portablegit\bin\
#Set GIT_SSH=%Disk%:\putty\plink.exe

set path_python=%Disk%:\py381;%Disk%:\py381\Scripts;
set path_msys2=%Disk%:\msys64\mingw64\bin;
set path_git=%Disk%:\portablegit\bin;
set path_cmake=%Disk%:\cmake-3.10.1-win64-x64\bin;
set path_vscode=%Disk%:\vscode;
set path_tcc=%Disk%:\tcc;


path=%Disk%:;%path_python%;%path_msys2%;%path_git%;%path_cmake%;%path_tcc%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wscite432\wscite\SciTE.exe
start /MIN %Disk%:\wscite432\wscite\SciTE.exe

Exit</pre>
<p>stop.bat</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
path=%PATH%;

taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
taskkill /IM scite.exe /F
taskkill /IM ShareX.exe /F

REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F

EXIT</pre>
<p><br/><br/></p><h2>pip</h2>
<h4>安裝 CMSiMDE 所需模組：</h4>
<p><span>利用 pip 安裝 flask, bs4, lxml, pelican, markdown, flask_cors, leo (可單獨安裝區少的模組)</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">pip install flask bs4 lxml pelican markdown flask_cors leo</pre>
<p></p><h2>SSH</h2>
<h4>批次檔設定</h4>
<p>執行隨身碟 SciTE.exe ( 位於 201906_fall\data\wscite415\wscite 目錄下 )</p>
<p><span lang="zh-TW">開啟</span><span lang="zh-TW"><span face="Calibri"> start_mdecourse.bat 並加入</span></span></p>
<p lang="x-none">REM for putty</p>
<p lang="x-none">Set GIT_HOME=%Cdisk%:\portablegit\bin\</p>
<p lang="x-none">Set GIT_SSH=%Disk%:\putty\plink.exe</p>
<h4>SSH 設定</h4>
<p><span lang="zh-TW">到 </span><span lang="en-US">.ssh </span><span lang="zh-TW">的目錄下<br/></span><span lang="x-none"><span face="Microsoft JhengHei">編輯 </span></span><span lang="x-none">config,插入</span></p>
<p><span lang="en-US">P</span><span lang="x-none">roxy Command y:/putty/plink.exe github.com %h %p</span></p>
<p><span lang="x-none">並註解掉</span></p>
<p><span lang="x-none">IdentityFile "y:\home_mdecourse\.ssh\id_rsa"</span></p>
<p><span lang="x-none"><img caption="false" height="139" src="https://s40723150.github.io/cad2019/images/SciTE_ssh_config.png" width="400"/></span></p>
<h4>設定 SSH key 的使用配置 ( 使用 Ipv 6 網路 )</h4>
<p>先下載 <a href="http://mde.tw/cp2019/content/USB%20%E7%A8%8B%E5%BC%8F%E7%B3%BB%E7%B5%B1.html">putty</a>  , 放到可攜系統的 data 目錄底下</p>
<h4>Key 轉換 ( 此設定方法是拿先前的 <span>Open SSH key</span><span> </span>)</h4>
<p>先建立一個 key ( 若之前已經有 Open SSH 的 key 就可以直接用那把 key )<br/>執行 puttygen.exe <br/>載入一個 <span>Open SSH 的 key</span></p>
<p><img alt="" height="400" src="https://s40723150.github.io/cad2019/images/puttygen_loadkey.png" width="398"/></p>
<p>*p.s.  若是使用之前的 key , bits 數請寄的設定為 4096 , 轉換成的類型請設定成 rsa <br/>轉存成 rsa 的 prviate key ( ppk檔 )</p>
<p><img alt="" height="400" src="https://s40723150.github.io/cad2019/images/puttygen_privatekey.png" width="398"/></p>
<h4>Putty 設定</h4>
<p>執行 putty.exe<br/>建立一個 session 叫 github.com</p>
<p>Host Name : github.com<br/>Port : 22<br/>Connection type : SSH</p>
<p><img alt="" height="400" src="https://s40723150.github.io/cad2019/images/putty_set_session.png" width="401"/></p>
<p>設定 proxy：</p>
<p>Proxy type : HTTP<br/><span>Proxy hostname :  [2001:288:6004:17::7]     Port : 3128<br/></span>Do DNS name lookup at proxy end :  Auto<br/>Username :  kmolab<br/>Password : kmolab</p>
<p><img alt="" height="400" src="https://s40723150.github.io/cad2019/images/putty_set_proxy.png" width="401"/></p>
<p>設定 SSH 底下的 Auth</p>
<p><span lang="x-none">Private key file for authentication :  </span><span lang="en-US">( 請指定 rsa-</span><span lang="x-none">key<span> </span></span><span lang="zh-TW">的位置 </span><span lang="en-US">)</span></p>
<p><span lang="en-US"><img alt="" height="400" src="https://s40723150.github.io/cad2019/images/putty_set_ssh_auth.png" width="401"/></span></p>
<p><span lang="en-US">*p.s.  需指定 ppk 檔</span></p>
<p><span lang="en-US">儲存 session 設定</span></p>
<p><span lang="en-US"><img alt="" height="400" src="https://s40723150.github.io/cad2019/images/putty_save.png" width="401"/></span></p>