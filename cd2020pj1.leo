<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20200511204814.1"><vh>@settings</vh>
<v t="leo.20200511204814.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20200511204814.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="yen.20200525094431.1"><vh>開發日誌</vh>
<v t="yen.20200601193216.1"><vh>採用 Mako template</vh></v>
</v>
<v t="yen.20200414103032.1"><vh>For Mac users</vh></v>
<v t="amd.20150313083555.45"><vh>About cd2020pj1</vh></v>
<v t="yen.20200418212333.1"><vh>Status</vh></v>
<v t="yen.20200419213322.1"><vh>@edit .gitignore</vh></v>
<v t="yen.20200418223522.1"><vh>flutter and flask</vh>
<v t="yen.20200419224718.1"><vh>develop .js from .dart</vh></v>
<v t="yen.20200419212418.1"><vh>@path static</vh>
<v t="yen.20200419212511.1"><vh>@button drawROCtojs</vh></v>
<v t="yen.20200419230015.1"><vh>@button copy js to docs/downloads</vh></v>
<v t="yen.20200419211033.1"><vh>dart2js</vh>
<v t="yen.20200419211912.1"><vh>@edit drawROC.dart</vh></v>
<v t="yen.20200419211955.1"><vh>html for drawROC</vh></v>
<v t="yen.20200419212331.1"><vh>css for drawROC</vh></v>
</v>
</v>
</v>
<v t="yen.20200419234118.1"><vh>Flask and Cango js library</vh></v>
<v t="leo.20200311103136.1"><vh>generate self-signed certificate</vh></v>
<v t="yen.20200414104044.1"><vh>oauth2 for @gm user</vh>
<v t="yen.20200414102935.1"><vh>oauth2 使用 authomatic</vh>
<v t="yen.20200414102935.2"><vh>google 設定</vh></v>
<v t="yen.20200414102935.3"><vh>啟用步驟</vh></v>
</v>
<v t="yen.20200414150039.1"><vh>read client id and secret from file</vh></v>
<v t="yen.20200414151417.1"><vh>generate secret id for Flask</vh></v>
<v t="yen.20200414142052.1"><vh>Google logout and redirect</vh></v>
</v>
<v t="leo.20200511213501.1"><vh>upload file to Gdrive</vh>
<v t="yen.20200525140313.1"><vh>KMOL example</vh></v>
<v t="yen.20200519095851.1"><vh>javascript</vh>
<v t="yen.20200519142351.1"><vh>ex1</vh></v>
<v t="yen.20200519142439.1"><vh>ex2</vh></v>
</v>
</v>
<v t="yen.20200526093830.1"><vh>GDrive API v3</vh>
<v t="yen.20200527171248.1"><vh>get token by program</vh></v>
<v t="yen.20200527214348.1"><vh>get token from credential</vh></v>
<v t="yen.20200529215216.1"><vh>example1</vh></v>
<v t="yen.20200527171737.1"><vh>MediaFileUpload</vh></v>
<v t="yen.20200529215344.1"><vh>example2</vh></v>
<v t="yen.20200527172037.1"><vh>googleapiclient.discovery</vh></v>
<v t="yen.20200527202743.1"><vh>create new folder</vh></v>
<v t="yen.20200527210816.1"><vh>trash file</vh></v>
<v t="yen.20200527212939.1"><vh>delete file</vh></v>
<v t="yen.20200527213626.1"><vh>download file </vh></v>
<v t="yen.20200527213743.1"><vh>upload from local to GDrive</vh></v>
<v t="yen.20200527230155.1"><vh>fileaxupload  傳檔至 GDrive</vh></v>
<v t="yen.20200527215250.1"><vh>upload with post method</vh>
<v t="yen.20200527215737.1"><vh>in Javascript</vh></v>
<v t="yen.20200527220755.1"><vh>in python</vh>
<v t="yen.20200527220955.1"><vh>resumable</vh></v>
</v>
</v>
<v t="yen.20200526211246.1"><vh>example</vh></v>
<v t="yen.20200527153437.1"><vh>media file upload</vh></v>
<v t="yen.20200527155239.1"><vh>example3</vh></v>
<v t="yen.20200527160033.1"><vh>Pygdrive3</vh>
<v t="yen.20200527160447.1"><vh>example</vh></v>
<v t="yen.20200527160341.1"><vh>service</vh></v>
</v>
</v>
<v t="yen.20200527155528.1"><vh>send email with Gmail</vh></v>
<v t="yen.20200531203803.1"><vh>Python program with proxy</vh></v>
<v t="yen.20200531204210.1"><vh>Bootstrap</vh></v>
<v t="yen.20200423213714.1"><vh>Starting Flask</vh>
<v t="leo.20200409150450.1"><vh>random grouping</vh>
<v t="yen.20200418212208.1"><vh>Save grouping result into database</vh></v>
</v>
</v>
<v t="yen.20200518224807.1"><vh>Ajax and Flask</vh>
<v t="yen.20200519095504.1"><vh>file uploader</vh></v>
<v t="yen.20200519104425.1"><vh>Dart ajax</vh></v>
</v>
<v t="yen.20200519160558.1"><vh>PyGithub</vh></v>
<v t="yen.20200419155906.1"><vh>Database</vh>
<v t="yen.20200419155956.1"><vh>@edit schema.sql</vh></v>
<v t="yen.20200419160014.1"><vh>@button create db</vh></v>
<v t="leo.20200311104947.1"><vh>use pybean.py to connect to SQLite</vh></v>
<v t="yen.20200419201709.1"><vh>use sqlite3 to save data to SQLite</vh></v>
<v t="leo.20200311104223.1"><vh>use peewee to connect to SQLite</vh></v>
</v>
<v t="amd.20150311165615.9"><vh>@path ./</vh>
<v t="amd.20151020231829.1"><vh>@edit .gitignore</vh></v>
<v t="leo.20200311090825.1"><vh>@edit README.md</vh></v>
<v t="amd.20150311165615.30"><vh>@edit wsgi.py</vh></v>
<v t="yen.20200414112225.1"><vh>@edit config.py</vh></v>
<v t="amd.20150311165615.31"><vh>@clean myflaskapp.py</vh>
<v t="yen.20200419202547.1"><vh>__init__</vh></v>
<v t="yen.20200420162350.1"><vh>before_request</vh></v>
<v t="yen.20200420141224.1"><vh>login_required</vh></v>
<v t="yen.20200419213555.1"><vh>drawROC</vh></v>
<v t="yen.20200420144030.1"><vh>menu</vh></v>
<v t="amd.20151020232112.1"><vh>send_static</vh></v>
<v t="amd.20151020232140.1"><vh>guess</vh></v>
<v t="amd.20151020232703.1"><vh>user</vh></v>
<v t="amd.20151020232845.1"><vh>req1</vh></v>
<v t="amd.20151020233400.1"><vh>red</vh></v>
<v t="amd.20151021000403.1"><vh>guessform</vh></v>
<v t="amd.20151021000629.1"><vh>docheck</vh></v>
<v t="leo.20200409151441.1"><vh>randomGrouping</vh></v>
<v t="yen.20200420153612.1"><vh>add_entry</vh></v>
<v t="yen.20200420153541.1"><vh>show_entries</vh></v>
<v t="leo.20200409151603.1"><vh>getNumList</vh></v>
<v t="yen.20200414111904.1"><vh>index</vh></v>
<v t="yen.20200423112001.1"><vh>alogin</vh></v>
<v t="yen.20200414111938.1"><vh>login</vh></v>
<v t="yen.20200420143358.1"><vh>logout</vh></v>
<v t="leo.20200511205800.1"><vh>fileaxupload</vh></v>
<v t="yen.20200528001940.1"><vh>filegdupload</vh></v>
<v t="leo.20200511205824.1"><vh>fileuploadform</vh></v>
<v t="yen.20200519105132.1"><vh>download</vh></v>
<v t="yen.20200519105414.1"><vh>downloads</vh></v>
<v t="yen.20200519105439.1"><vh>download_list</vh></v>
<v t="yen.20200519105625.1"><vh>downloadlist_access_list</vh></v>
<v t="yen.20200519110307.1"><vh>sizeof_fmt</vh></v>
<v t="yen.20200519110530.1"><vh>delete_file</vh></v>
<v t="yen.20200519110824.1"><vh>doDelete</vh></v>
<v t="yen.20200523231031.1"><vh>saveToDB</vh></v>
<v t="yen.20200525194733.1"><vh>uploadToGdrive</vh></v>
<v t="yen.20200527161936.1"><vh>uploadToGdrive3</vh></v>
</v>
</v>
<v t="amd.20151020232503.1"><vh>@path static</vh>
<v t="yen.20200523200833.1"><vh>有關檔案上傳程式</vh></v>
<v t="yen.20200523203310.1"><vh>變數</vh></v>
<v t="yen.20200523205244.1"><vh>AJAX</vh></v>
<v t="leo.20200511211602.1"><vh>@edit axuploader.js</vh></v>
<v t="yen.20200525092904.1"><vh>@edit uploadform.js</vh></v>
</v>
<v t="amd.20151020234043.1"><vh>@path templates</vh>
<v t="yen.20200419213847.1"><vh>@edit drawROC.html</vh></v>
<v t="yen.20200420154412.1"><vh>@edit show_entries.html</vh></v>
<v t="yen.20200420154310.1"><vh>@edit layout.html</vh></v>
<v t="amd.20151020234049.1"><vh>@edit guess.html</vh></v>
<v t="amd.20151020234120.1"><vh>@edit user.html</vh></v>
<v t="amd.20151021000500.1"><vh>@edit guessform.html</vh></v>
<v t="amd.20151021000748.1"><vh>@edit docheck.html</vh></v>
<v t="amd.20151021083709.1"><vh>@edit toobig.html</vh></v>
<v t="amd.20151021083719.1"><vh>@edit toosmall.html</vh></v>
<v t="yen.20200423112223.1"><vh>@edit alogin.html</vh></v>
<v t="yen.20200414111626.1"><vh>@edit login.html</vh></v>
<v t="yen.20200420144223.1"><vh>@edit menu.html</vh></v>
<v t="yen.20200414111705.1"><vh>@edit index.html</vh></v>
<v t="yen.20200414111741.1"><vh>@edit base.html</vh></v>
<v t="yen.20200525094121.1"><vh>@edit uploadform.html</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20150311165615.31">@language python
# https://mde.tw/cd2020 協同設計專案
# coding: utf-8
from flask import Flask, send_from_directory, request, redirect, \
                render_template, session, make_response, \
                url_for, abort, flash, g, jsonify
import random
# for random grouping
import requests
# for authomatic
from authomatic.adapters import WerkzeugAdapter
from authomatic import Authomatic

# from config.py 導入 CONFIG
from config import CONFIG

# for _curdir
import os
# calculate pagenating
import math

# for login_required decorator
from functools import wraps

# for sqlite3 資料庫
import sqlite3
from contextlib import closing

# for add_entry
import datetime

# for GDrive upload
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

# for get mimeType of uploaded file
import mimetypes

# for uploadToGDrive3
# pip install google-api-python-client
# https://github.com/googleapis/google-api-python-client
import pickle
from googleapiclient.discovery import build
from apiclient.http import MediaFileUpload

# for filegdupload
import pickle
import codecs
import json

# for mako template engine
# for mako template 系統
from mako.template import Template
from mako.lookup import TemplateLookup

# Instantiate Authomatic.
authomatic = Authomatic(CONFIG, 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T', report_errors=False)

# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
download_dir = _curdir + "/downloads/"
template_root_dir = _curdir + "/templates"
    
app = Flask(__name__)

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'

@others

if __name__ == "__main__":
    app.run()

</t>
<t tx="amd.20150311165615.9"></t>
<t tx="amd.20150313083555.45">Application of Python and Flask on the colloaborative mechanical design.

Stared on March 11, 2020
</t>
<t tx="amd.20151020232112.1"># setup static directory
@app.route('/static/&lt;path:path&gt;')
def send_static(path):
    return send_from_directory('static', path)</t>
<t tx="amd.20151020232140.1">@app.route("/guess")
@login_required
def guess():
    '''
    if not session.get('login'):
        return redirect(url_for('index'))
    '''
    # This is the starting form for guessing numbers game, mainly to generate answers, and to reset count to zero
    # Store answers of guessing
    theanswer = random.randint(1, 100)
    thecount = 0
    # Store the answer and the number of calculation variables in the session
    session['answer'] = theanswer
    session['count'] = thecount
    user = session.get('user')

    template_lookup = TemplateLookup(directories=[template_root_dir])
    guessTemplate = template_lookup.get_template("guess.html")
    return guessTemplate.render(answer=theanswer, count=thecount, user=user)


</t>
<t tx="amd.20151020232503.1"></t>
<t tx="amd.20151020232703.1">@app.route('/user/&lt;name&gt;')
def user(name):
    return render_template("user.html", name=name)</t>
<t tx="amd.20151020232845.1">@app.route('/req1')
def req1():
    user_agent = request.headers.get('User-Agent')
    return '&lt;p&gt;Your browser is %s&lt;/p&gt;' % user_agent</t>
<t tx="amd.20151020233400.1">@app.route('/red')
def red():
    # redirect to google
    return redirect("http://www.google.com")</t>
<t tx="amd.20151020234043.1"></t>
<t tx="amd.20151021000403.1">@login_required
@app.route('/guessform')
def guessform():
    session["count"] += 1
    guess = session.get("guess")
    theanswer = session.get("answer")
    count = session.get("count")
    
    template_lookup = TemplateLookup(directories=[template_root_dir])
    guessTemplate = template_lookup.get_template("guessform.html")
    return guessTemplate.render(guess=guess, answer=theanswer, count=count)</t>
<t tx="amd.20151021000629.1">@app.route('/docheck', methods=['POST'])
@login_required
def docheck():
    template_lookup = TemplateLookup(directories=[template_root_dir])
    if not session.get('login'):
        return redirect(url_for('index'))
    # use session[] to save data
    # use session.get() to get session data
    # use request.form[] to get field data of form and send to template
    guess = request.form["guess"]
    session["guess"] = guess
    # if use execute doCheck directly, send it back to the root method
    if guess is None:
        redirect("/")
    # get answer from session, when execute doCheck directly, no session data will be accessed
    try:
        theanswer = int(session.get('answer'))
    except:
        redirect("/")
    # the data type from web based form is string
    try:
        theguess = int(guess)
    except:
        return redirect("/guessform")
    # every doCheck being executed increase the count session value
    session["count"] += 1
    count = session.get("count")
    # compare the answer and the guess value
    tooBigTemplate = template_lookup.get_template("toobig.html")
    tooSmallTemplate = template_lookup.get_template("toosmall.html")
    if theanswer &lt; theguess:
        return tooBigTemplate.render(guess=guess, answer=theanswer, count=count)
    elif theanswer &gt; theguess:
        return tooSmallTemplate.render(guess=guess, answer=theanswer, count=count)
    else:
        # 
        # got the answer, get count from session
        thecount = session.get('count')
        return "Guess "+str(thecount)+" times, finally got the answer, the answer is "+str(theanswer)+": &lt;a href='/guess'&gt;Play again&lt;/a&gt;"

    doCheckTemplate = template_lookup.get_template("docheck.html")
    return doCheckTemplate.render(guess=guess)
 </t>
<t tx="leo.20200311103136.1">Location of openssl from https://www.msys2.org/

y:\msys64\mingw64\bin\openssl.exe

openssl req -x509 -nodes -days 600 -newkey rsa:2048 -keyout cd2020.key -out cd2020.crt</t>
<t tx="leo.20200311104223.1">https://github.com/coleifer/peewee</t>
<t tx="leo.20200311104947.1">https://github.com/mdecourse/wcms-scrum1

Pybean reference:

https://github.com/jonathan-kosgei/pybean

https://github.com/johndoe46/PyBean

from pybean import Store, SQLiteWriter
library = Store(SQLiteWriter(":memory:", frozen=False))
book = library.new("book")
book.title = "Boost development with pybean"
book.author = "Charles Xavier"
library.save(book)
for book in library.find("book","author like ?",["Charles Xavier"]):
        print book.title
library.delete(book)
library.commit()

To Create a new database table

pybean.setup()
book = pybean.dispense(bean_type)
pybean.db.commit()
pybean.close()

To store data in a database table

pybean.setup()
bean_type = 'book'
bookone.name = 'Eragon'
bookone.author = 'Christopher Paolini'
bean_id = pybean.store(bookone)
pybean.db.commit()

To load data from a database table

pybean.setup()
bean_type = 'book'
bookone = pybean.dispense(bean_type)
bookone.name = 'Eldest'
bookone.author = 'Christopher Paolini'
bean_id = pybean.store(bookone)
bean = pybean.load(bean_type, bean_id)
#print(bean)

To enter multiple rows in a database table

pybean.setup()
bean_type1 = 'movies'
bean_type2 = 'books'
beans = pybean.dispenseAll(bean_type1, bean_type2)
pybean.db.commit()

To load multiple rows from a database table

pybean.setup()
bean_type = 'book'
book = pybean.dispense(bean_type)
book.title = 'The Inheritance'
id1 = pybean.store(book)
page = pybean.dispense(bean_type)
page.number = 145
id2 = pybean.store(page)
#print(id2, page)
beans = pybean.loadAll(bean_type, id1, id2)
#print(beans)
pybean.close()

To delete a row in a database table

pybean.setup()
bean_type = 'book'
bookone = pybean.dispense(bean_type)
bookone.name = 'Eldest'
bookone.author = 'Christopher Paolini'
id = pybean.store(bookone)
pybean.trash(bookone.type, id)
pybean.close()

To delete multiple rows in a database table

pybean.setup()
bean_type1 = 'book'
bean_type2 = 'book'
beans = pybean.dispenseAll(bean_type1, bean_type2)
beans[0].name = 'The Man from St.Petersburg'
beans[1].name = 'Preface'
id1 = pybean.store(beans[0])
id2 = pybean.store(beans[1])
pybean.trashAll('book', id1, id2)
pybean.close()

To delete a database table

pybean.setup()
cursor = pybean.db.cursor()
bean_type = 'book'
book = pybean.dispense(bean_type)
book.title = 'Head Fist C#'
id = pybean.store(book)
pybean.wipe('book')
pybean.close()

To delete an entire database

pybean.setup()
pybean.nuke()</t>
<t tx="leo.20200409150450.1">@language python
import random
import requests

# get the distributed list among each group
def getNumList(total, eachGrp=10):
    # total is the number of students
    # each group at least 10 students
    #eachGrp = 10;
    # may divide into "grpNum" number of group
    grpNum = total // eachGrp;
    # check grpNum
    #print(grpNum)
    # vacan list
    splits = []
    # find remainder when total number divid into "grpNum" number of group
    remainder = total % grpNum
    # number of people in one group by calculation
    calGrp = total // grpNum

    for i in range(grpNum):
        splits.append(calGrp)

    # check first splits
    #print(splits)

    for i in range(remainder):
        splits[i] += 1

    # check final splits
    #print(splits);
    return splits;
 
# url to get the student number data
target_url = "http://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt"
# use requests to retrieve data from url
f = requests.get(target_url)
# get student list from target_url
# use splitlines() to put student number into studList
studList = f.text.splitlines()
# minimum number for each group
num_in_one_group = 10
# temp list to save the student number for each group
gpList = []
# whole class list
group = []
# number of member list for each group
numList = []
# get numList
numList = getNumList(len(studList), num_in_one_group)
# check numList
# list numList
print("Expected number of member list:" + str(numList))

output = ""
gth = 1
inc = 0

# use shuffle method of random module to shuffle studList
random.shuffle(studList)
output += "Before sort: \n"
for i in numList:
    # print 20 * sign
    output += '=' * 20 + "\n";
    output += "group " + str(gth) + " 有 " + str(i) + " 人: \n"
    # reset group list
    gpList = []
    for j in range(i):
        output += studList[j+inc] + "\n"
        # append student number into grpList
        gpList.append(studList[j+inc])

    gth = gth + 1
    inc = inc + j
    # sort gpList
    gpList.sort()
    group.append(gpList)
 
# print output which is the result before sorting
print(output)
# print group whis is the sorted result
print("Sorted result:" + str(group))
 
output = ""
# output sorted result
output += '=' * 25 + "\n"
output += 'Sorted result:\n'
gth = 1
 
# list sorted data seperated by \n
for i in range(len(group)):
    # print seperated mark
    output += '=' * 20 + "\n"
    output += "group" + str(gth) + "\n"
    gpList = []

    for j in range(len(group[i])):
        output += str(group[i][j]) + "\n"

    gth = gth + 1

print(output)</t>
<t tx="leo.20200409151441.1">@app.route("/randomgrouping")
@login_required
def randomGrouping():
    # url to get the student number data
    target_url = "http://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt"
    # use requests to retrieve data from url
    f = requests.get(target_url)
    # get student list from target_url
    # use splitlines() to put student number into studList
    studList = f.text.splitlines()
    # minimum number for each group
    num_in_one_group = 10
    # temp list to save the student number for each group
    gpList = []
    # whole class list
    group = []
    # number of member list for each group
    numList = []
    # get numList
    numList = getNumList(len(studList), num_in_one_group)
    # check numList
    # list numList
    #print("Expected number of member list:" + str(numList))
    
    output = ""
    gth = 1
    inc = 0
    
    # use shuffle method of random module to shuffle studList
    random.shuffle(studList)
    output += "Before sort: &lt;br /&gt;"
    for i in numList:
        # print 20 * sign
        output += '=' * 20 + "&lt;br /&gt;";
        output += "group " + str(gth) + " has " + str(i) + " members:&lt;br /&gt;"
        # reset group list
        gpList = []
        for j in range(i):
            output += studList[j+inc] + "&lt;br /&gt;"
            # append student number into grpList
            gpList.append(studList[j+inc])

        gth = gth + 1
        inc = inc + j
        # sort gpList
        gpList.sort()
        group.append(gpList)

    # print output which is the result before sorting
    print(output)
    # print group whis is the sorted result
    print("Sorted result:" + str(group))

    output = ""
    # output sorted result
    output += '=' * 20 + "&lt;br /&gt;"
    output += 'Sorted result:&lt;br /&gt;'
    gth = 1

    # list sorted data seperated by \n
    for i in range(len(group)):
        # print seperated mark
        output += '=' * 20 + "&lt;br /&gt;"
        output += "group" + str(gth) + "&lt;br /&gt;"
        gpList = []

        for j in range(len(group[i])):
            output += str(group[i][j]) + "&lt;br /&gt;"

        gth = gth + 1

    #print(output)
    
    # add grouping result into grouping table of /db/database.db
    date = datetime.datetime.now().strftime("%b %d, %Y - %H:%M:%S")
    user = session.get("user")
    result = str(group)
    # 希望新增重複資料查驗功能
    g.db.execute('insert into grouping (user , date, result, memo) values (? , ?, ?, ?)',
            (user, date, result, "memo"))
    g.db.commit()
    flash('已經新增一筆資料!')
    return output</t>
<t tx="leo.20200409151603.1"># get the distributed list among each group
def getNumList(total, eachGrp=10):
    # total is the number of students
    # each group at least 10 students
    #eachGrp = 10;
    # may divide into "grpNum" number of group
    grpNum = total // eachGrp;
    # check grpNum
    #print(grpNum)
    # vacan list
    splits = []
    # find remainder when total number divid into "grpNum" number of group
    remainder = total % grpNum
    # number of people in one group by calculation
    calGrp = total // grpNum

    for i in range(grpNum):
        splits.append(calGrp)

    # check first splits
    #print(splits)

    for i in range(remainder):
        splits[i] += 1

    # check final splits
    #print(splits);
    return splits;</t>
<t tx="leo.20200511204814.1"></t>
<t tx="leo.20200511204814.2">QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20200511204814.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20200511205800.1">@login_required
@app.route('/fileaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def fileaxupload():
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    filename = request.args.get("ax-file-name")
    flag = request.args.get("start")
    if flag == "0":
        file = open(_curdir + "/downloads/" + filename, "wb")
    else:
        file = open(_curdir + "/downloads/" + filename, "ab")
    file.write(request.stream.read())
    file.close()
    return "files uploaded!"


</t>
<t tx="leo.20200511205824.1">@login_required
@app.route('/fileuploadform', defaults={'edit':1})
@app.route('/fileuploadform/&lt;path:edit&gt;')
def fileuploadform(edit):
    '''
    準備改寫為 template 傳回上傳表單, 或加上其他相關欄位
    '''
    template_lookup = TemplateLookup(directories=[template_root_dir])
    uploadFormTemplate = template_lookup.get_template("uploadform.html")
    return uploadFormTemplate.render()



</t>
<t tx="leo.20200511213501.1">Pydrive 使用 Google Drive API v2, 而非最新的 v3

https://pythonhosted.org/PyDrive/index.html

https://www.mattbutton.com/2019/01/05/google-authentication-with-python-and-flask/

https://github.com/mattbutton/google-authentication-with-python-and-flask

reference

    https://github.com/grapheo12/Flask-GDrive
    
    https://medium.com/@annissouames99/how-to-upload-files-automatically-to-drive-with-python-ee19bb13dda
    
    https://github.com/paulgoetze/flask-gcs-upload-example-app/tree/part-1</t>
<t tx="yen.20200414102935.1">http://peterhudec.github.io/authomatic/</t>
<t tx="yen.20200414102935.2">config.py

from authomatic.providers import oauth2

CONFIG = {
        'google': {
            'class_': oauth2.Google,
            'consumer_key': '##########',
            'consumer_secret': '##########',
            'id': authomatic.provider_id(),
            'scope': oauth2.Google.user_info_scope
        }
    }
    '''
        'scope': ['https://www.googleapis.com/auth/userinfo.profile',
        'https://www.googleapis.com/auth/userinfo.email']
    '''

main.py

from flask import Flask, render_template, request, make_response
from authomatic.adapters import WerkzeugAdapter
from authomatic import Authomatic

from config import CONFIG

@app.route('/')
def index():
    return render_template('index.html')
    
@app.route('/login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
def login(provider_name):
    response = make_response()
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # You need to set a secret string otherwise the session will not work.
app.secret_key = 'random secret string'

    result = authomatic.login(
    WerkzeugAdapter(request, response),
    provider_name,
    session=session,
    session_saver=lambda: app.save_session(session, response)
    )
    if result:
        if result.user:
            result.user.update()
        return render_template('login.html', result=result)
    return response
    
{# base.html #}
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Authomatic Flask Example&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        {% block body %}{% endblock %}
    &lt;/body&gt;
&lt;/html&gt;

{# index.html #}
{% extends "base.html" %}
{% block body %}

    &lt;!--Links to the login handler--&gt;
    Login with &lt;a href="login/fb"&gt;Facebook&lt;/a&gt;.&lt;br /&gt;
    Login with &lt;a href="login/tw"&gt;Twitter&lt;/a&gt;.&lt;br /&gt;
    
    &lt;!--OpenID form--&gt;
    &lt;form action="login/oi"&gt;
        &lt;input type="text" name="id" value="me.yahoo.com" /&gt;
        &lt;input type="submit" value="Authenticate With OpenID"&gt;
    &lt;/form&gt;

{% endblock %}

{# login.html #}
{% extends "base.html" %}
{% block body %}
    &lt;a href="/"&gt;Home&lt;/a&gt;
    
    {% if result.error %}
        &lt;h2&gt;Damn that error: {{ result.error.message }}&lt;/h2&gt;
    {% endif %} 
    
    {% if result.user %}
        &lt;h1&gt;Hi {{ result.user.name }}&lt;/h1&gt;
        &lt;h2&gt;Your id is: {{ result.user.id }}&lt;/h2&gt;
        &lt;h2&gt;Your email is: {{ result.user.email }}&lt;/h2&gt;
    {% endif %}
    
    {% if result.user.credentials %}
            {% if result.provider.name == 'fb' %}
            Your are logged in with Facebook.&lt;br /&gt;
            {% set url = 'https://graph.facebook.com/{0}?fields=feed.limit(5)'.format(result.user.id) %}
            {% set response = result.provider.access(url) %}
            {% if response.status == 200 %}
            {% if response.data.error %}
                Damn that error: {{ response.data.error }}!
            {% endif %}
             {% if response.data.feed.data %}
                Your 5 most recent statuses:&lt;br /&gt;
                {% for status in response.data.feed.data %}
                    &lt;h3&gt;{{ status.message or status.name or status.story }}&lt;/h3&gt;
                    Posted on: {{ status.created_time }}
                {% endfor %}
            {% endif %}
                {% endif %}{# response.status == 200 #}
            {% endif %}{# result.provider.name == 'fb' #}
</t>
<t tx="yen.20200414102935.3">
設定網址:

https://console.developers.google.com

總共有兩項設定:

1. 啟用 Google + API

2. 然後到憑證處建立專案, 設定授權的 URI

然後 config.py 部份:

##############################################

import authomatic
from authomatic.providers import oauth2

CONFIG = {
        'google': {
            'class_': oauth2.Google,
            'consumer_key': '#######',
            'consumer_secret': '#######',
            'scope': oauth2.Google.user_info_scope
        }
    }
    
###############################################

# 接著為 login 部份

@app.route('/autho_login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
def autho_login(provider_name):
    
    # We need response object for the WerkzeugAdapter.
    response = make_response()
    
    # Log the user in, pass it the adapter and the provider name.
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # If there is no LoginResult object, the login procedure is still pending.
    if result:
        if result.user:
            # We need to update the user to get more info.
            result.user.update()
        
        # The rest happens inside the template.
        return render_template('autho_login.html', user_name=result.user.name, user_id=result.user.id, user_email=result.user.email, result=result)
    
    # Don't forget to return the response.
    return response</t>
<t tx="yen.20200414103032.1">While using Leo Editor on Mac,

Environment:

    Leo Editor 6.2.1 final
    Python 3.7.3
    PyQt 5.12.3
    Darwin

Notice for Mac user:

    the System Preferences -&gt; General 
        need to set to Auto to get the correct menu theme color
        
    it seems only the last open .leo file can use File -&gt; Save, other previous open .leo files can only be saved while file close.
    
    outline copy and paste only working for mouse click not from pull-down menu</t>
<t tx="yen.20200414104044.1">Setup URL

https://console.developers.google.com

First setup, the welcome popup:

    Welcome, KMOLab!
    
    Create and manage your Google Cloud Platform instances, disks, networks and other resources in one place.
    
    need to agree the Terms of Service.
    
You have 12 projects remaining in your quota. 

----
Enable Google + Domain API

Go to credentials

Remember to configure the OAuth consent screen with information about your application.

----
OAuth consent screen

Choose how you want to configure and register your app, including your target users. You can only associate one app with your project.

User type:

choose internal: only allow @gm user to login

Press Create
----
Create OAuth client ID

Application type: Web application</t>
<t tx="yen.20200414111904.1">@app.route('/')
# root of the system can not set "login_required" decorator
# 開始改用 Make 作為 Template
def index():
    template_lookup = TemplateLookup(directories=[template_root_dir])
    indexTemplate = template_lookup.get_template("index.html")
    return indexTemplate.render()
</t>
<t tx="yen.20200414111938.1">@app.route('/login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
def login(provider_name):
    
    # We need response object for the WerkzeugAdapter.
    response = make_response()
    
    # Log the user in, pass it the adapter and the provider name.
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # If there is no LoginResult object, the login procedure is still pending.
    if result:
        if result.user:
            # We need to update the user to get more info.
            result.user.update()
        
        # use session to save login user's email (試著將 @ 換為 _at_)
        #session['loginEmail'] = result.user.email.replace('@', '_at_')
        loginUser = result.user.email.split("@")[0]
        session["user"] = loginUser
        session["login"] = True
        template_lookup = TemplateLookup(directories=[template_root_dir])
        loginTemplate = template_lookup.get_template("login.html")
        CALLBACK_URL = "https://localhost:8443/menu"
        
        return loginTemplate.render(result=result, CALLBACK_URL=CALLBACK_URL)

    # Don't forget to return the response.
    return response
</t>
<t tx="yen.20200414142052.1">https://stackoverflow.com/questions/4202161/google-account-logout-and-redirect

https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout?continue=https://localhost:8443/guess

When user login with Gmail account, user email is saved into session and logout from Gmail by using javascript and redirect to https://localhost:8443/guess</t>
<t tx="yen.20200414150039.1">@language python

keyFile = open('./../oauth_gm.txt', 'r')
with open('./../oauth_gm.txt', 'r') as f:
    key = f.read().splitlines()
g.es(key)</t>
<t tx="yen.20200414151417.1">@language python
# Windows use Ctrl + b to execute under Leo Editor node
# Mac use Command +b to execute
# app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'
# this key is to keep the session safe
import secrets

g.es(secrets.token_urlsafe(24))

# 6Xpn4BDO5b1t39dNcPH6PAWTlQaD4B8X
# c8aDEUckVQnZ8nwkAgGSk3nvS_beJYkL
# WFUABb_IPfxvdZgaih4Lecik4giKBtTd</t>
<t tx="yen.20200418212208.1"></t>
<t tx="yen.20200418212333.1">1. oauth2 to login with Gmail account
after system got user email, use session to save user email account and logout from Gmail right away.

    Done

and then redirect to guess method

2. need to save the /randomgrouping result into SQLite database

    Done

3. socketio?

    http://mde.tw/cp2019/content/Flutter%20Mobile.html</t>
<t tx="yen.20200418223522.1">https://medium.com/@pyzimos/flutter-chatbot-with-python-flask-backend-heroku-deployment-706baafbb8f1</t>
<t tx="yen.20200419155906.1"></t>
<t tx="yen.20200419160014.1">@language python
'''
local_data/db/database.db
'''
import os

os.system("sqlite3 db/database.db &lt; schema.sql")
# echo string
'''
for Leo Editor:
c is the commander of the outline containing the script.
g is Leo’s leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
g.es("database.db created")</t>
<t tx="yen.20200419201709.1">@language python
# sqlite3 is default for Python3
import sqlite3
# g is global object for Leo Editor
# es is the "echo string" method of g object
g.es("sqlite3")

# https://flask.palletsprojects.com/en/1.1.x/patterns/sqlite3/</t>
<t tx="yen.20200419202547.1">def __init__():
    # create required directory
    if not os.path.isdir(_curdir+"db"):
        try:
            os.makedirs(_curdir+"db")
        except:
            print("db mkdir error")
    # create SQLite database file if not existed
    try:
        # need to check if this work with Windows
        conn = sqlite3.connect(_curdir+"/db/database.db")
        cur = conn.cursor()
        # create table
        cur.execute("CREATE TABLE IF NOT EXISTS grouping( \
                id INTEGER PRIMARY KEY AUTOINCREMENT, \
                user TEXT not null, \
                date TEXT not null, \
                result TEXT not null, \
                memo TEXT);")
        cur.close()
        conn.close()
    except:
        print("can not create db and table")
    with closing(connect_db()) as db:
        with app.open_resource('schema.sql' , mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()
    print("do nothing")
</t>
<t tx="yen.20200419211033.1">On Mac

dart2js located at

/Users/login_account/development/flutter/bin/cache/dart-sdk/bin

cd
vi .bash_profile

export PATH="$PATH:/Users/login_account/development/flutter/bin/cache/dart-sdk/bin"

source ./bash_profile</t>
<t tx="yen.20200419211955.1">@language html

&lt;div id="wrapper"&gt;
  &lt;canvas id="canvas" width="300" height="200"&gt;&lt;/canvas&gt;&lt;br /&gt;
  &lt;button id="button"&gt;Clear Canvas&lt;/button&gt;
  &lt;button id="roc"&gt;Draw ROC&lt;/button&gt;
  &lt;button id="usa"&gt;Draw USA&lt;/button&gt;
&lt;/div&gt;</t>
<t tx="yen.20200419212331.1">html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

#wrapper {
  width: 300px;
  margin: auto;
  border: solid thin black;
}</t>
<t tx="yen.20200419212418.1"></t>
<t tx="yen.20200419212511.1">@language python
'''
static/drawROC.js
'''
import os

# https://dart.dev/tools/dart2js#basic-options
# -02 is for dart2js optimization level

os.system("/Users/yen/development/flutter/bin/cache/dart-sdk/bin/dart2js -02 -o drawROC.js drawROC.dart")
# echo string
'''
for Leo Editor:
c is the commander of the outline containing the script.
g is Leo’s leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
g.es("drawROC.js created")</t>
<t tx="yen.20200419213555.1">@app.route('/drawROC')
@login_required
def drawROC():
    template_lookup = TemplateLookup(directories=[template_root_dir])
    rocTemplate = template_lookup.get_template("drawROC.html")
    return rocTemplate.render()
    </t>
<t tx="yen.20200419224718.1">Here we use Flask to send variables through GET or POST to integrated with Dart programs.</t>
<t tx="yen.20200419230015.1">@language python
import os

os.system("cp drawROC.js ./../docs/downloads/")
# echo string
'''
for Leo Editor:
c is the commander of the outline containing the script.
g is Leo’s leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
g.es("copy drawROC.js to ./../docs/downloads/")</t>
<t tx="yen.20200419234118.1">https://www.arc.id.au/GearDrawing.html

Using Javascript and Cango Library for engineering drawing.</t>
<t tx="yen.20200420141224.1">def login_required(f):
    @wraps(f)
    def wrap(*args, **kwargs):
        if 'login' in session:
            return f(*args, **kwargs)
        else:
            flash("You need to login first")
            return redirect(url_for('index'))

    return wrap
</t>
<t tx="yen.20200420143358.1">@app.route('/logout')
def logout():
    session.pop('login' , None)
    session.pop('user', None)
    flash('Logged out!')
    return redirect(url_for('index'))</t>
<t tx="yen.20200420144030.1">@app.route("/menu")
@login_required
def menu():
    menuList = ["guess", "drawROC", "randomgrouping", "show_entries", "fileuploadform", "download_list"]
    template_lookup = TemplateLookup(directories=[template_root_dir])
    menuTemplate = template_lookup.get_template("menu.html")
    return menuTemplate.render(menuList=menuList)</t>
<t tx="yen.20200420153541.1"># set default value of the variables accordingly
@app.route('/show_entries', defaults={'page': 1, 'item_per_page': 10})
@app.route('/show_entries/&lt;int:page&gt;', defaults={'item_per_page': 10})
@app.route('/show_entries/&lt;int:page&gt;/&lt;int:item_per_page&gt;')
@login_required
# 內定每頁顯示 10 筆資料, 從第1頁開始
def show_entries(page, item_per_page):
    # 先取得資料總筆數
    cur = g.db.execute('select * from grouping;')
    total_number = len(cur.fetchall())
    query_string = 'select id, user , date, result, memo from grouping order by id desc limit '+str(item_per_page)+' offset '+str((page-1)*item_per_page)
    cur = g.db.execute(query_string)
    grouping = [dict(id=row[0], user=row[1], date=row[2], result=row[3], memo=row[4]) for row in cur.fetchall()]
    totalpage = math.ceil(total_number/int(item_per_page))
    login = session.get('login')
    template_lookup = TemplateLookup(directories=[template_root_dir])
    showEntriesTemplate = template_lookup.get_template("show_entries.html")
    return showEntriesTemplate.render(login=login, grouping = grouping, \
                        total_number=total_number, page=page, \
                        item_per_page=item_per_page, totalpage=totalpage)             
    
</t>
<t tx="yen.20200420153612.1">@app.route('/add_entry',methods=['POST'])
@login_required
def add_entry():
    date = datetime.datetime.now()
    # 希望新增重複資料查驗功能
    g.db.execute('insert into grouping (user , date, result, memo) values (? , ?, ?, ?)',
            (request.form['user'], date, request.form['result'], \
            request.form['memo']))
    g.db.commit()
    flash('已經新增一筆資料!')
    return redirect(url_for('show_entries'))
</t>
<t tx="yen.20200420162350.1">@app.before_request
def before_request():
    # need to check if this works with Windows
    g.db = sqlite3.connect(_curdir+"/db/database.db")</t>
<t tx="yen.20200423112001.1">@app.route('/alogin' , methods=['GET' , 'POST'])
def alogin():
    error = None
    if request.method == 'POST':
        if request.form['username'] != "admin":
            error = '錯誤!'
        elif request.form['password'] != "admin":
            error = '錯誤!'
        else :
            session['login'] = True
            session['user'] = "alogin"
            flash('已經登入!')
            return redirect(url_for('menu'))
    return render_template('alogin.html' , error = error)
</t>
<t tx="yen.20200423213714.1">from flask import Flask

app = Flask(__name__)

@app.route('/') 
def hello_world():
    return 'Hello, From Flask!'

if __name__== '__main__': 
	app.run()</t>
<t tx="yen.20200518224807.1">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Practice AJAX&lt;/title&gt;
    &lt;script type="text/javascript"&gt;
      function do_ajax() {
        var req = new XMLHttpRequest();
        var result = document.getElementById('result');
        req.onreadystatechange = function()
        {
          if(this.readyState == 4 &amp;&amp; this.status == 200) {
            result.innerHTML = this.responseText;
          } else {
            result.innerHTML = "處理中...";
          }
        }

        req.open('POST', '/', true);
        req.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        req.send("name=" + document.getElementById('name').value);
      }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form action="index" method="post"&gt;
      &lt;label&gt;Name:&lt;input type="text" id="name" value="" /&gt;&lt;/label&gt;
      &lt;button type="button" id="btn-post" onclick="do_ajax();"&gt;Click&lt;/button&gt;
      &lt;div id="result"&gt;&lt;/div&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;

from flask import Flask, request, render_template

app = Flask(__name__)
app.debug = True


@app.route("/", methods=['GET', 'POST'])
def index():
    if request.method == "POST":
        name = request.form["name"]
        # 此時 name 值在 server 端, 並交由 index.html 處理
        return name + " Hello"
    return render_template("index.html")


if __name__ == "__main__":
    app.run()</t>
<t tx="yen.20200519095504.1">https://github.com/blueimp/jQuery-File-Upload</t>
<t tx="yen.20200519095851.1">https://gist.github.com/tanaikech/bd53b366aedef70e35a35f449c51eced

https://gist.github.com/tanaikech/2f16f467c94612dc83920a3158614d95

https://github.com/tanaikech/ResumableUploadForGoogleDrive_js

https://github.com/tanaikech/AsynchronousResumableUploadForGoogleDrive

https://gist.github.com/Max-Makhrov/a70ca1a5a5fbf32b7ef97c5cd1888510</t>
<t tx="yen.20200519104425.1">https://api.dart.dev/stable/2.8.2/dart-html/HttpRequest-class.html</t>
<t tx="yen.20200519105132.1">@app.route('/download/', methods=['GET'])
def download():

    """Download file using URL
    """

    filename = request.args.get('filename')
    type = request.args.get('type')
    if type == "files":
        return send_from_directory(download_dir, filename=filename)
    else:
    # for image files
        return send_from_directory(image_dir, filename=filename)
    

</t>
<t tx="yen.20200519105414.1">@app.route('/downloads/&lt;path:path&gt;')
def downloads(path):

    """Send files in downloads directory
    """

    return send_from_directory(_curdir+"/downloads/", path)

</t>
<t tx="yen.20200519105439.1">@app.route('/download_list', methods=['GET'])
@login_required
def download_list():
    '''
    準備改寫為 template based
    '''

    """List files in downloads directory
    """

    if not request.args.get('edit'):
        edit= 1
    else:
        edit = request.args.get('edit')
    if not request.args.get('page'):
        page = 1
    else:
        page = request.args.get('page')
    if not request.args.get('item_per_page'):
        item_per_page = 10
    else:
        item_per_page = request.args.get('item_per_page')
    if not request.args.get('keyword'):
        keyword = ""
    else:
        keyword = request.args.get('keyword')
        session['download_keyword'] = keyword

    files = os.listdir(download_dir)
    if keyword != "":
        files = [elem for elem in files if str(keyword) in elem]
    files.sort()
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page=" + str(item_per_page) + \
                                "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(page_num) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "

        span = 10

        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;" + str(page) + " &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page=" + str(page_now) + "&amp;amp;item_per_page=" + \
                                        str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now) + "&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(nextpage) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(totalpage) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"

        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += downloadlist_access_list(files, starti, endi) + "&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += downloadlist_access_list(files, starti, total_rows) + "&lt;br /&gt;"

        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page=" + str(item_per_page) + \
                                "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(page_num) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "

        span = 10

        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;" + str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page=" + str(page_now) + \
                                        "&amp;amp;item_per_page=" + str(item_per_page) + \
                                        "&amp;amp;keyword=" + str(session.get('download_keyword'))
                    outstring += "'&gt;" + str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(nextpage) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(totalpage) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"


    return "&lt;h1&gt;Download List&lt;/h1&gt;" + outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="yen.20200519105625.1">def downloadlist_access_list(files, starti, endi):
    
    """List files function for download_list
    """
    
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(download_dir+"/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="' + \
                              files[index] + '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/images/' +  \
                              files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + \
                              files[index] + '&lt;/a&gt; (' + str(fileSize) + ')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="' + \
                              files[index] + '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=' + '/downloads/' + \
                              files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + \
                              files[index] + '&lt;/a&gt; (' + str(fileSize) + ')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="' + \
                              files[index] + '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/flvplayer?filepath=/downloads/' + \
            files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + files[index] + '&lt;/a&gt; (' + str(fileSize) + ')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='" + files[index] + \
                              "'&gt;&lt;a href='./../downloads/" + files[index] + "'&gt;" + files[index] + \
                              "&lt;/a&gt; (" + str(fileSize) + ")&lt;br /&gt;"
    return outstring


# downloads 方法主要將位於 downloads 目錄下的檔案送回瀏覽器
</t>
<t tx="yen.20200519110307.1">def sizeof_fmt(num):
    """size formate"""
    for x in ['bytes','KB','MB','GB']:
        if num &lt; 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0
    return "%3.1f%s" % (num, 'TB')
</t>
<t tx="yen.20200519110530.1">@app.route('/delete_file', methods=['POST'])
@login_required
def delete_file():

    """Delete user uploaded files
    """
    # use request.form.getlist() allow multiple select
    filename = request.form.getlist('filename')

    if filename is None:
        outstring = "no file selected!"
        return "&lt;h1&gt;Delete Error&lt;/h1&gt;" + \
                   outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename + "&lt;input type='hidden' name='filename' value='" + \
                            filename + "'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index] + "&lt;input type='hidden' name='filename' value='" + \
                                filename[index]+"'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return "&lt;h1&gt;Download List&lt;/h1&gt;" + \
               outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="yen.20200519110824.1">@app.route('/doDelete', methods=['POST'])
@login_required
def doDelete():

    """Action to delete user uploaded files
    """

    # delete files
    # allow multiple files selection
    filename = request.form.getlist('filename')
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(download_dir + "/" + filename)
            outstring += filename + " deleted!"
        except:
            outstring += filename + "Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(download_dir + "/" + filename[index])
                outstring += filename[index] + " deleted!&lt;br /&gt;"
            except:
                outstring += filename[index] + "Error, can not delete files!&lt;br /&gt;"


    return "&lt;h1&gt;Download List&lt;/h1&gt;" + \
               outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="yen.20200519142351.1">var fileContent = 'sample text'; // As a sample, upload a text file.
var file = new Blob([fileContent], {type: 'text/plain'});
var metadata = {
    'name': 'sampleName', // Filename at Google Drive
    'mimeType': 'text/plain', // mimeType at Google Drive
    'parents': ['### folder ID ###'], // Folder ID at Google Drive
};

var accessToken = gapi.auth.getToken().access_token; // Here gapi is used for retrieving the access token.
var form = new FormData();
form.append('metadata', new Blob([JSON.stringify(metadata)], {type: 'application/json'}));
form.append('file', file);

var xhr = new XMLHttpRequest();
xhr.open('post', 'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&amp;fields=id');
xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);
xhr.responseType = 'json';
xhr.onload = () =&gt; {
    console.log(xhr.response.id); // Retrieve uploaded file ID.
};
xhr.send(form);</t>
<t tx="yen.20200519142439.1">var fileContent = 'sample text'; // As a sample, upload a text file.
var file = new Blob([fileContent], {type: 'text/plain'});
var metadata = {
    'name': 'sampleName', // Filename at Google Drive
    'mimeType': 'text/plain', // mimeType at Google Drive
    'parents': ['### folder ID ###'], // Folder ID at Google Drive
};

var accessToken = gapi.auth.getToken().access_token; // Here gapi is used for retrieving the access token.
var form = new FormData();
form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
form.append('file', file);

fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&amp;fields=id', {
    method: 'POST',
    headers: new Headers({ 'Authorization': 'Bearer ' + accessToken }),
    body: form,
}).then((res) =&gt; {
    return res.json();
}).then(function(val) {
    console.log(val);
});</t>
<t tx="yen.20200519160558.1">https://github.com/PyGithub/PyGithub

Github REST API v3: https://developer.github.com/v3/repos/collaborators/

u = g.get_user()

repo = u.create_repo(name=repoName, description=description, auto_init=True)

repo.add_to_collaborators('usename', permission='push')

# try to see if add_to_collaborators ('email_address', permission='push')
# permission="admin" 讓使用者具管理權
# permission="push" 讓使用者有 push 權</t>
<t tx="yen.20200523200833.1">https://stackoverflow.com/questions/2937227/what-does-function-jquery-mean

IIFE

https://developer.mozilla.org/en-US/docs/Glossary/IIFE

http://benalman.com/news/2010/11/immediately-invoked-function-expression/

(function($) {})(jQuery);

----

// an anonymous function
  
(function () { console.log('hello') });

// a self invoked anonymous function

(function () { console.log('hello') })();
  
// a self invoked anonymous function with a parameter called "$"
  
var jQuery = 'I\'m not jQuery.';

(function ($) { console.log($) })(jQuery);

----

This structure (function() {})(); is called IIFE (Immediately Invoked Function Expression), it will be executed immediately, when the interpreter will reach this line. So when you're writing these rows:

(function($) {
  // do something
})(jQuery);

this means, that the interpreter will invoke the function immediately, and will pass jQuery as a parameter, which will be used inside the function as $.</t>
<t tx="yen.20200523203310.1">fileList 列出使用者所選擇要上傳的檔案

fileArray 應該就是上傳檔名矩陣</t>
<t tx="yen.20200523205244.1">https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX

https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest

To send an HTTP request, create an XMLHttpRequest object, open a URL, and send the request. After the transaction completes, the object will contain useful information such as the response body and the HTTP status of the result.</t>
<t tx="yen.20200523231031.1">@app.route('/saveToDB' , methods=['POST'])
@login_required
def saveToDB():

    """axuploader.js 將檔案上傳後, 將上傳檔案名稱數列, 以 post 回傳到 Flask server.
    
    截至這裡, 表示檔案已經從 client 上傳至 server, 可以再設法通過認證, 將 server 上的檔案上傳到對應的 Google Drive, 並且在上傳後的 GDrive 目錄, 設定特定擷取權限 (例如: 只允許 @gm 用戶下載.
    以下則可將 server 上傳後的擷取目錄與 GDrive 各檔案 ID 存入資料庫, 而檔案擷取則分為 server 擷取與 GDrive 擷取等兩種 url 連結設定
    """

    if request.method == "POST":
        files = request.form["files"]
        # split files string
        files = files.split(",")
        # files 為上傳檔案名稱所組成的數列
        for i in range(len(files)):
            # 逐一將已經存在 server downloads 目錄的檔案, 上傳到 GDrive uploaded 目錄
            fileName = files[i]
            fileLocation = _curdir + "/downloads/" + fileName
            mimeType = mimetypes.MimeTypes().guess_type(fileLocation)[0]
            # for GDrive v2
            #gdriveID = uploadToGdrive(fileName, mimeType)
            # for GDrive v3
            gdriveID = uploadToGdrive3(fileName, mimeType)
            fileSize = str(round(os.path.getsize(fileLocation)/(1024*1024.0), 2)) + " MB"
            date = datetime.datetime.now().strftime("%b %d, %Y - %H:%M:%S")
            user = session.get("user")
            print(user + "|" + str(fileSize) + "|" + str(mimeType) + "|"  + gdriveID)
            # 逐一將上傳檔案名稱存入資料庫, 同時存入mimeType, fileSize 與 gdriveID
            # 資料庫欄位
            #g.db.execute('insert into grouping (user , date, fileName, mimeType, fileSize, memo) values (?, ?, ?, ?, ?, ?)',(user, date, fileName, mimeType, fileSize, "memo"))
            #g.db.commit()
            #flash('已經新增一筆 upload 資料!')
    return "Uploaded fileName and gdriveID save to database"</t>
<t tx="yen.20200525094431.1">2020.05.25

    1. 已經在檔案上傳後加上取得上傳檔案的數列, 目前將檔名存檔, 準備改存入資料庫
    
    2. 之後將逐一改寫未採 template based 的表單, 全部轉為以樣板模式送出 html 
    
    3. 另一項任務將是在上傳檔案存入伺服器硬碟的同時, 也將檔案存入 Google Drive, 並透過 url 註記在上傳檔案的資料庫表單中, 以便後續可以刪除或更新
    
    4. 目前已經將 Fossil SCM 配置在 labmdetw 網站中 (:5443, 並採 Letsencrypt 登記 https), 或許有機會在同一台伺服器中, 利用 session 轉換, 讓 Flask 網際程式與 Fossil SCM 都透過 Google OAuth2 帳號登入
    
    5. https://github.com/Yenthe666/InstallScript 中有 odoo 在 Ubuntu 安裝的 shell 程式, 從 odoo 的相依模組, Pypdf2, Mako 可以想見最早的 OpenERP 開發時, 是以 Flask 入手, 透過逐步的框架改寫與 extension 架構配置, 成為目前的 odoo 社群, 與網際機電資整合產品開發流程有關的方向, 可以從 odoo 與 Webots 下手.
    
    [odoo]: https://www.odoo.com/
    [webots]: https://cyberbotics.com/</t>
<t tx="yen.20200525140313.1">from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

gauth = GoogleAuth()
gauth.LoadClientConfigFile("./../client_secrets.json")
#gauth.LocalWebserverAuth() # client_secrets.json need to be in the same directory as the script
drive = GoogleDrive(gauth)

'''
# View all folders and file in your Google Drive
fileList = drive.ListFile({'q': "'root' in parents and trashed=false"}).GetList()
for file in fileList:
  print('Title: %s, ID: %s' % (file['title'], file['id']))
  # Get the folder ID that you want
  # 檔案會上傳到根目錄下的 uploaded  目錄中
  if(file['title'] == "uploaded"):
      fileID = file['id']
'''
# GDrive 上 uploaded 目錄的 fileID
with open("./../uploaded_id.txt", 'r') as content_file:
    fileID = content_file.read()

#fileID = "your_folder_file_ID"

fileName = "ModernC.pdf"
filePath = "./test/"
file1 = drive.CreateFile({"mimeType": "application/pdf", "parents": [{"kind": "drive#fileLink", "id": fileID}], "title":  fileName})
file1.SetContentFile(filePath + fileName)
file1.Upload() # Upload the file.
#print('Created file %s with mimeType %s' % (file1['title'], file1['mimeType']))   
print("upload fileID:" + str(file1['id']))
file2 = drive.CreateFile({'id': file1['id']})
file2.GetContentFile('./test/downloaded_ModernC.pdf') # Download file as 'downloaded_ModernC.pdf under directory test'.

'''
file1.Trash()  # Move file to trash.
file1.UnTrash()  # Move file out of trash.
file1.Delete()  # Permanently delete the file.
'''
</t>
<t tx="yen.20200525194733.1">def uploadToGdrive(fileName, mimeType):
    gauth = GoogleAuth()
    # 必須使用 desktop 版本的 client_secrets.json
    gauth.LoadClientConfigFile("./../gdrive_desktop_client_secrets.json")
    drive = GoogleDrive(gauth)
    
    '''
    # View all folders and file in your Google Drive
    fileList = drive.ListFile({'q': "'root' in parents and trashed=false"}).GetList()
    for file in fileList:
      print('Title: %s, ID: %s' % (file['title'], file['id']))
      # Get the folder ID that you want
      # 檔案會上傳到根目錄下的 uploaded  目錄中
      if(file['title'] == "uploaded"):
          fileID = file['id']
    '''
    # GDrive 上 uploaded 目錄的 fileID
    with open("./../gdrive_uploaded_id.txt", 'r') as content_file:
        fileID = content_file.read()
    
    # 由上述目錄外的檔案讀取 uploaded 目錄對應 ID
    #fileID = "your_folder_file_ID"
    # 上傳檔案名稱為輸入變數
    #fileName = "DemoFile.pdf"
    filePath = _curdir + "/downloads/"
    # parents 為所在 folder, 亦即 uploaded 目錄, fileID 為 uploaded 目錄的 ID
    file1 = drive.CreateFile({"mimeType": mimeType, "parents": [{"kind": "drive#fileLink", "id": fileID}], "title":  fileName})
    file1.SetContentFile(filePath + fileName)
    file1.Upload() # Upload the file.
    # 傳回與上傳檔案對應的 GDrive ID, 將會存入資料庫 gdiveID 欄位
    return file1['id']
    #print('Created file %s with mimeType %s' % (file1['title'], file1['mimeType']))   
    #print("upload fileID:" + str(file1['id']))
    # 以下為下載檔案測試
    # file2 = drive.CreateFile({'id': file1['id']})
    #file2.GetContentFile('./test/downloaded_ModernC.pdf') # Download file as 'downloaded_ModernC.pdf under directory test'.
    
    '''
    file1.Trash()  # Move file to trash.
    file1.UnTrash()  # Move file out of trash.
    file1.Delete()  # Permanently delete the file.
    '''</t>
<t tx="yen.20200526093830.1">https://developers.google.com/drive/api/v3/quickstart/python

https://github.com/5minds/GDrive-Tools
upload 1.3 GB 至 Google Drive 約費時 10 分鐘

https://pypi.org/project/gdrive-tools/

https://stackoverflow.com/questions/54162891/google-drive-api-v3-change-file-permissions-and-get-publicly-shareable-link-pyt

https://blog.gtwang.org/programming/automation-of-google-ocr-using-python-tutorial/

https://medium.com/@yysu/%E7%B2%BE%E9%80%9Apython-30-days-day-3-54a0347a574b

required modules

pip3 install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib


from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload

from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

</t>
<t tx="yen.20200526211246.1">from __future__ import print_function
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

# If modifying these scopes, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly']

def main():
    """Shows basic usage of the Drive v3 API.
    Prints the names and ids of the first 10 files the user has access to.
    """
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('./../../../../../gdrive_token.pickle'):
        with open('./../../../../../gdrive_token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                './../../../../../gdrive_desktop_client_secrets.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('./../../../../../gdrive_token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('drive', 'v3', credentials=creds)

    # Call the Drive v3 API
    results = service.files().list(
        pageSize=10, fields="nextPageToken, files(id, name)").execute()
    items = results.get('files', [])

    if not items:
        print('No files found.')
    else:
        print('Files:')
        for item in items:
            print(u'{0} ({1})'.format(item['name'], item['id']))

if __name__ == '__main__':
    main()</t>
<t tx="yen.20200527153437.1">file_metadata = {'name': 'photo.jpg'}
media = MediaFileUpload('files/photo.jpg', mimetype='image/jpeg')
file = drive_service.files().create(body=file_metadata,
                                    media_body=media,
                                    fields='id').execute()
print('File ID: %s' % file.get('id'))





file_metadata = {
    'name': 'My Report',
    'mimeType': 'application/vnd.google-apps.spreadsheet'
}
media = MediaFileUpload('files/report.csv',
                        mimetype='text/csv',
                        resumable=True)
file = drive_service.files().create(body=file_metadata,
                                    media_body=media,
                                    fields='id').execute()
print('File ID: %s' % file.get('id'))




file_metadata = {
    'name': 'Invoices',
    'mimeType': 'application/vnd.google-apps.folder'
}
file = drive_service.files().create(body=file_metadata,
                                    fields='id').execute()
print('Folder ID: %s' % file.get('id'))




folder_id = '0BwwA4oUTeiV1TGRPeTVjaWRDY1E'
file_metadata = {
    'name': 'photo.jpg',
    'parents': [folder_id]
}
media = MediaFileUpload('files/photo.jpg',
                        mimetype='image/jpeg',
                        resumable=True)
file = drive_service.files().create(
                                    body=file_metadata,
                                    media_body=media,
                                    fields='id').execute()
print('File ID: %s' % file.get('id'))





file_id = '1sTWaJ_j7PkjzaBWtNc3IzovK5hQf21FbOw9yLeeLPNQ'
folder_id = '0BwwA4oUTeiV1TGRPeTVjaWRDY1E'
# Retrieve the existing parents to remove
file = drive_service.files().get(fileId=file_id,
                                 fields='parents').execute()
previous_parents = ",".join(file.get('parents'))
# Move the file to the new folder
file = drive_service.files().update(fileId=file_id,
                                    addParents=folder_id,
                                    removeParents=previous_parents,
                                    fields='id, parents').execute()




file_id = '0BwwA4oUTeiV1UVNwOHItT0xfa2M'
request = drive_service.files().get_media(fileId=file_id)
fh = io.BytesIO()
downloader = MediaIoBaseDownload(fh, request)
done = False
while done is False:
    status, done = downloader.next_chunk()
    print("Download %d%%." % int(status.progress() * 100))




file_id = '1ZdR3L3qP4Bkq8noWLJHSr_iBau0DNT4Kli4SxNc2YEo'
request = drive_service.files().export_media(fileId=file_id,
                                             mimeType='application/pdf')
fh = io.BytesIO()
downloader = MediaIoBaseDownload(fh, request)
done = False
while done is False:
    status, done = downloader.next_chunk()
    print ("Download %d%%." % int(status.progress() * 100))
</t>
<t tx="yen.20200527155239.1">@language python
# https://github.com/samlopezf/google-drive-api-tutorial
from __future__ import print_function
import httplib2
import os, io

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
from apiclient.http import MediaFileUpload, MediaIoBaseDownload
try:
    import argparse
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
    flags = None
import auth
# If modifying these scopes, delete your previously saved credentials
# at ~/.credentials/drive-python-quickstart.json
SCOPES = 'https://www.googleapis.com/auth/drive'
CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'Drive API Python Quickstart'
authInst = auth.auth(SCOPES,CLIENT_SECRET_FILE,APPLICATION_NAME)
credentials = authInst.getCredentials()

http = credentials.authorize(httplib2.Http())
drive_service = discovery.build('drive', 'v3', http=http)

def listFiles(size):
    results = drive_service.files().list(
        pageSize=size,fields="nextPageToken, files(id, name)").execute()
    items = results.get('files', [])
    if not items:
        print('No files found.')
    else:
        print('Files:')
        for item in items:
            print('{0} ({1})'.format(item['name'], item['id']))

def uploadFile(filename,filepath,mimetype):
    file_metadata = {'name': filename}
    media = MediaFileUpload(filepath,
                            mimetype=mimetype)
    file = drive_service.files().create(body=file_metadata,
                                        media_body=media,
                                        fields='id').execute()
    print('File ID: %s' % file.get('id'))

def downloadFile(file_id,filepath):
    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while done is False:
        status, done = downloader.next_chunk()
        print("Download %d%%." % int(status.progress() * 100))
    with io.open(filepath,'wb') as f:
        fh.seek(0)
        f.write(fh.read())

def createFolder(name):
    file_metadata = {
    'name': name,
    'mimeType': 'application/vnd.google-apps.folder'
    }
    file = drive_service.files().create(body=file_metadata,
                                        fields='id').execute()
    print ('Folder ID: %s' % file.get('id'))

def searchFile(size,query):
    results = drive_service.files().list(
    pageSize=size,fields="nextPageToken, files(id, name, kind, mimeType)",q=query).execute()
    items = results.get('files', [])
    if not items:
        print('No files found.')
    else:
        print('Files:')
        for item in items:
            print(item)
            print('{0} ({1})'.format(item['name'], item['id']))
#uploadFile('unnamed.jpg','unnamed.jpg','image/jpeg')
#downloadFile('1Knxs5kRAMnoH5fivGeNsdrj_SIgLiqzV','google.jpg')
#createFolder('Google')
searchFile(10,"name contains 'Getting'")</t>
<t tx="yen.20200527155528.1">https://github.com/samlopezf/gmail-api-sending-emails-tutorial

</t>
<t tx="yen.20200527160033.1">https://pypi.org/project/pygdrive3/

https://github.com/matAlmeida/pygdrive3/blob/master/pygdrive3/service.py</t>
<t tx="yen.20200527160341.1">@language python
from __future__ import print_function
from apiclient.discovery import build
from apiclient.http import MediaFileUpload
from httplib2 import Http
from oauth2client import file, client, tools
import mimetypes
import os


class DriveService:
    def __init__(self, client_secret):

        client_secret_path = os.path.abspath(client_secret)
        has_client_secret = os.path.isfile(client_secret_path)

        if not has_client_secret:
            link = 'https://developers.google.com/drive/api/v3/quickstart/python'
            raise NameError(
                '&lt;client_secret.json&gt; not Found. Access the following link and go to step one to get your client_secret.json file:\n {0}'.format(link))

        self.client_secret = client_secret_path

    def auth(self):
        current_dir = os.getcwd()
        credentials_dir = os.path.join(
            current_dir, os.path.abspath('./credentials'))
        if not os.path.exists(credentials_dir):
            os.makedirs(credentials_dir)
        SCOPES = 'https://www.googleapis.com/auth/drive'
        store = file.Storage(credentials_dir + '/credentials.json')
        creds = store.get()
        if not creds or creds.invalid:
            flow = client.flow_from_clientsecrets(self.client_secret, SCOPES)
            creds = tools.run_flow(flow, store)
        self.drive_service = build('drive', 'v3', http=creds.authorize(Http()))

    def create_folder(self, name, parent_id=None):
        if parent_id != None:
            metadata = {
                'name': name,
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [parent_id]
            }
        else:
            metadata = {
                'name': name,
                'mimeType': 'application/vnd.google-apps.folder'
            }

        folder = self.drive_service.files().create(
            body=metadata,
            fields='id'
        ).execute()

        return folder.get('id')

    def upload_file(self, name, filePath, folder_id):
        fileType = mimetypes.guess_type(filePath)[0]
        if fileType == None:
            raise NameError("Invalid type or missing suffix!")

        file_metadata = {
            'name': name + '.' + fileType.split('/')[-1],
            'parents': [folder_id]
        }
        media = MediaFileUpload(filePath, mimetype=fileType)

        file = self.drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()

        return file.get('id')

    def writer_permission(self, email, file_id):
        batch = self.drive_service.new_batch_http_request(
            callback=self.__callback)
        permission = {
            'type': 'user',
            'role': 'writer',
            'emailAddress': email
        }
        batch.add(self.drive_service.permissions().create(
            fileId=file_id,
            body=permission,
            fields='id',
        ))
        batch.execute()

        return True

    def reader_permission(self, email, file_id):
        batch = self.drive_service.new_batch_http_request(
            callback=self.__callback)
        permission = {
            'type': 'user',
            'role': 'reader',
            'emailAddress': email
        }
        batch.add(self.drive_service.permissions().create(
            fileId=file_id,
            body=permission,
            fields='id',
        ))
        batch.execute()

        return True

    def transfer_ownership(self, email, file_id):
        batch = self.drive_service.new_batch_http_request(
            callback=self.__callback)
        permission = {
            'type': 'user',
            'role': 'owner',
            'emailAddress': email
        }
        batch.add(self.drive_service.permissions().create(
            transferOwnership=True,
            fileId=file_id,
            body=permission,
            fields='id',
        ))
        batch.execute()

        return True

    def anyone_permission(self, file_id):
        batch = self.drive_service.new_batch_http_request(
            callback=self.__callback)
        permission = {
            'type': 'anyone',
            'role': 'reader'
        }
        batch.add(self.drive_service.permissions().create(
            fileId=file_id,
            body=permission,
            fields='id',
        ))
        batch.execute()

        return 'https://drive.google.com/file/d/{0}/view?usp=sharing'.format(file_id)

    def get_file_info(self, file_id):
        fields = "kind,name,mimeType,description,parents,version,createdTime,modifiedTime,lastModifyingUser,size"

        file = self.drive_service.files().get(fileId=file_id, fields=fields).execute()

        return file

    def list_files_from_folder_id(self, folder_id):
        itemsList = []

        page_token = None
        while True:
            response = self.drive_service.files().list(
                q="'" + folder_id + "' in parents",
                spaces='drive',
                fields='nextPageToken, files(id, name, modifiedTime, mimeType, size)',
                page_token=page_token
            ).execute()

            for file in response.get('files', []):
                # Process change
                itemsList.append({
                    'id': file.get('id'),
                    'name': file.get('name'),
                    'modifiedTime': file.get('modifiedTime'),
                    'type': file.get('mimeType'),
                    'size': file.get('size')
                })
            page_token = response.get('nextPageToken', None)
            if page_token is None:
                break

        return itemsList

    def list_folders_by_name(self, name):
        return self.__list_items_by_name(name, "mimeType = 'application/vnd.google-apps.folder'")

    def list_files_by_name(self, name):
        return self.__list_items_by_name(name, "mimeType != 'application/vnd.google-apps.folder'")

    def __list_items_by_name(self, name, extraQuery=None):
        query = 'name contains \'' + name + '\''

        if extraQuery != None:
            query += " and " + extraQuery

        print(query)
        itemsList = []

        page_token = None
        while True:
            response = self.drive_service.files().list(
                q=query,
                spaces='drive',
                fields='nextPageToken, files(id, name, modifiedTime, mimeType, size)',
                pageToken=page_token
            ).execute()

            for file in response.get('files', []):
                # Process change
                itemsList.append({
                    'id': file.get('id')
                })
            page_token = response.get('nextPageToken', None)
            if page_token is None:
                break

        return itemsList

    def __callback(self, request_id, response, exception):
        if exception:
            # Handle error
            print(exception)
        else:
            pass
</t>
<t tx="yen.20200527160447.1">from pygdrive3 import service

drive_service = service.DriveService('./client_secret.json')
drive_service.auth()

folder = drive_service.create_folder('Xesque')
file = drive_service.upload_file('Arquivo Teste', './files/test.pdf', folder)
link = drive_service.anyone_permission(file)

folders = drive_service.list_folders_by_name('Xesque')
files = drive_service.list_files_by_name('Arquivo Teste')

files_from_folder = drive_service.list_files_from_folder_id(folder)</t>
<t tx="yen.20200527161936.1">def uploadToGdrive3(fileName, mimeType):
    # get upload folder id
    # GDrive 上 uploaded 目錄的 fileID
    with open("./../gdrive_uploaded_id.txt", 'r') as content_file:
        folderID = content_file.read()

    creds = None
    with open('./../gdrive_write_token.pickle', 'rb') as token:
        creds = pickle.load(token)
    # 讀進既有的 token, 建立 service
    driveService = build('drive', 'v3', credentials=creds)

    metadata = {
        'name': fileName,
        'mimeType': mimeType,
        # 注意: 必須提供數列格式資料
        'parents': [folderID]
        }

    filePath = _curdir + "/downloads/" + fileName
    media = MediaFileUpload(filePath,
                                            mimetype=mimeType,
                                            chunksize=1024*1024,
                                            resumable=True
                                            )

    gdFile = driveService.files().create(
        body=metadata,
        media_body=media,
        fields='id'
    ).execute()
    fileID = gdFile.get("id")

    return fileID
</t>
<t tx="yen.20200527171248.1">@language python
# under cd2020pj1/docs/download/upload_gdrive/v3
from __future__ import print_function
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

# get upload folder id
# GDrive 上 uploaded 目錄的 fileID
with open("./../../../../../gdrive_uploaded_id.txt", 'r') as content_file:
    fileID = content_file.read()

# If modifying these scopes, delete the file token.pickle.
#SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly']
SCOPES = ['https://www.googleapis.com/auth/drive']

def main():
    """Shows basic usage of the Drive v3 API.
    Prints the names and ids of the first 10 files the user has access to.
    """
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('./../../../../../gdrive_token.pickle'):
        with open('./../../../../../gdrive_token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                './../../../../../gdrive_desktop_client_secrets.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('./../../../../../gdrive_token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('drive', 'v3', credentials=creds)

    # Call the Drive v3 API
    results = service.files().list(
        pageSize=10, fields="nextPageToken, files(id, name)").execute()
    items = results.get('files', [])

    if not items:
        print('No files found.')
    else:
        print('Files:')
        for item in items:
            print(u'{0} ({1})'.format(item['name'], item['id']))

if __name__ == '__main__':
    main()</t>
<t tx="yen.20200527171737.1">https://googleapis.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaFileUpload-class.html</t>
<t tx="yen.20200527172037.1">build


https://googleapis.github.io/google-api-python-client/docs/epy/googleapiclient.discovery-module.html#build</t>
<t tx="yen.20200527202743.1">@language python
# http://eyana.me/upload-files-to-gdrive-using-python-part-1/

# ---------------------------------------
# GDrive API: Create New Folder
# ---------------------------------------
def createGDriveFolder(filename,parent):  
    file_metadata = {'name': filename,'parents': [parent],
    'mimeType': "application/vnd.google-apps.folder"}

    folder = SERVICE.files().create(body=file_metadata,
                                        fields='id').execute()
    print('Upload Success!')
    print('FolderID:', folder.get('id'))
    return folder.get('id')</t>
<t tx="yen.20200527210816.1"># https://developers.google.com/drive/api/v3/reference/files/update

def trashFile(service, file_id):
    body = {'trashed': True}
    updated_file = service.files().update(fileId=file_id, body=body).execute()
    return updated_file</t>
<t tx="yen.20200527212939.1">https://developers.google.com/drive/api/v3/reference/files/delete

service.files().delete(file.getId()).execute();</t>
<t tx="yen.20200527213626.1">from __future__ import print_function
from flask import Flask, render_template, jsonify, request
import sys, requests, mimetypes
import pickle
import io
import os.path
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

@app.route('/drive_download')
def drive_download():


    #CREDENTIALS
    try:

        SCOPES = ['https://www.googleapis.com/auth/drive']
        ##this might need to be swapped out to work with google picker authentication
        creds = None
        if os.path.exists('token.pickle'):
            with open('token.pickle', 'rb') as token:
                creds = pickle.load(token)
        # If there are no (valid) credentials available, let the user log in.
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file('client_secret.json', SCOPES) #Client_secret.json is what I called my credentials.json
                creds = flow.run_local_server()
        # Save the credentials for the next run
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)




        #DOWNLOAD FILE (I'm downloading a json file)

        #Get file_id from AJAX call (this uses Picker to return the id of a file)  
        file_id = request.args.get("fileID")

        drive_service = build('drive', 'v3', credentials=creds)

        requests = drive_service.files().get_media(fileId = file_id)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, requests)
        done = False
        while done is False:
            status, done = downloader.next_chunk()
            print("Download %d%%." % int(status.progress() * 100), file=sys.stderr)
            fh.seek(0)
            json = fh.read()
            jsonRead = json.decode('utf-8') #decode from bytes into string

        return jsonify(jsonRead) #Return file contents back to AJAX call

    except Exception as e:
        return(str(e))</t>
<t tx="yen.20200527213743.1">import json
import requests
headers = {"Authorization": "Bearer ### access token ###"}
para = {
    "name": "sample.png",
    "parents": ["### folder ID ###"]
}
files = {
    'data': ('metadata', json.dumps(para), 'application/json; charset=UTF-8'),
    'file': open("./sample.png", "rb")
}
r = requests.post(
    "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
    headers=headers,
    files=files
)
print(r.text)</t>
<t tx="yen.20200527214348.1">https://help.talend.com/reader/Ovc10QFckCdvYbzxTECexA/EoAKa_oFqZFXH0aE0wNbHQ</t>
<t tx="yen.20200527215250.1">POST /drive/v3/files HTTP/1.1
Host: www.googleapis.com
Authorization: Bearer &lt;OAuth 2.0 access token here&gt;
...

{
  "title": "file_name.extension",
  "mimeType": "mime/type",
  "description": "Stuff about the file"
}
</t>
<t tx="yen.20200527215737.1">index.html

&lt;form&gt;
    &lt;span&gt;Upload: &lt;/span&gt;&lt;input id="file" type="file" name="myFile"&gt;
&lt;/form&gt;

Javascript:

function gd_uploadFile(name, contentType, data, callback) {
    const boundary = '-------314159265358979323846';
    const delimiter = "\r\n--" + boundary + "\r\n";
    const close_delim = "\r\n--" + boundary + "--";

    contentType = contentType || "text/html";
    var metadata = {
        name: name,
        'mimeType': contentType,
        parents: [folderID]
    };

    var multipartRequestBody =
        delimiter +  'Content-Type: application/json\r\n\r\n' +
        JSON.stringify(metadata) +
        delimiter +
        'Content-Type: ' + contentType + '\r\n';

    //Transfer images as base64 string.
    if (contentType.indexOf('image/') === 0) {
        var pos = data.indexOf('base64,');
        multipartRequestBody += 'Content-Transfer-Encoding: base64\r\n' + '\r\n' +
            data.slice(pos &lt; 0 ? 0 : (pos + 'base64,'.length));
    } else {
        multipartRequestBody +=  + '\r\n' + data;
    }
    multipartRequestBody += close_delim;

    if (!callback) { callback = function(file) { console.log("Update Complete ", file) }; }

    superagent.post('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart').
        set('Content-Type', 'multipart/form-data;  boundary="' + boundary + '"').
        set('Authorization', 'Bearer ' + gapi.auth.getToken().access_token).
        send(multipartRequestBody).
        end(function () {
            console.log(arguments);
        });
}

//On upload
$('#file')[0].onchange = function () {
    var file = $('#file')[0].files[0];
    if (file &amp;&amp; file.type === 'image/jpeg') {
        var reader = new FileReader();
        reader.onloadend = function () {
            var data = reader.result;
            gd_uploadFile('img.jpg', 'image/jpeg', data, function () {
                console.log(arguments);
            });
        }
        reader.readAsDataURL(file);
    }
};</t>
<t tx="yen.20200527220755.1">HTTP

    Create a POST request to the method's /upload URI with the query parameter of uploadType=multipart:

    POST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart

    Create the body of the request. Format the body according to the multipart/related content type [RFC 2387], which contains two parts:
        Metadata. The metadata must come first and must have a Content-Type header set to application/json; charset=UTF-8. Add the file's metadata in JSON format.
        Media. The media must come second and must have a Content-Type header of any MIME type. Add the file's data to the media part.

    Identify each part with a boundary string, preceded by two hyphens. In addition, add two hyphens after the final boundary string.

    Add these top-level HTTP headers:
        Content-Type. Set to multipart/related and include the boundary string you're using to identify the different parts of the request. For example: Content-Type: multipart/related; boundary=foo_bar_baz
        Content-Length. Set to the total number of bytes in the request body.

    Send the request.

To create or update the metadata portion only, without the associated data, send a POST or PUT request to the standard resource endpoint: https://www.googleapis.com/drive/v3/files If the request succeeds, the server returns the HTTP 200 OK status code along with the file's metadata.

Note: To update an existing file, use PUT.</t>
<t tx="yen.20200527220955.1">HTTP

    Create a POST request to the method's /upload URI with the query parameter of uploadType=resumable:

    POST https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable

    If the initiation request succeeds, the response includes a 200 OK HTTP status code. In addition, it includes a Location header that specifies the resumable session URI:

    HTTP/1.1 200 OK
    Location: https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable&amp;upload_id=xa298sd_sdlkj2
    Content-Length: 0

You should save the resumable session URI so you can upload the file data and query the upload status. A resumable session URI expires after one week.
Note: To update an existing file, use PUT.

If you have metadata for the file, add the metadata to the request body in JSON format. Otherwise, leave the request body empty.

Add these HTTP headers:

    X-Upload-Content-Type. Optional. Set to the MIME type of the file data, which is transferred in subsequent requests. If the MIME type of the data is not specified in metadata or through this header, the object is served as application/octet-stream.
    X-Upload-Content-Length. Optional. Set to the number of bytes of file data, which is transferred in subsequent requests.
    Content-Type. Required if you have metadata for the file. Set to application/json; charset=UTF-8.
    Content-Length. Required unless you use chunked transfer encoding. Set to the number of bytes in the body of this initial request.

Send the request. If the session initiation request succeeds, the response includes a 200 OK HTTP status code. In addition, the response includes a Location header that specifies the resumable session URI. Use the resumable session URI to upload the file data and query the upload status. A resumable session URI expires after one week.

Copy and save the resumable session URL.

Continue to [Uploading content](#uploading}</t>
<t tx="yen.20200527230155.1">目前的 axuploader.js 以 ajax 將檔案以 chunk 方式送至 fileaxupload Python 函式進行存檔, 若要直接將檔案送往 GDrive, 必須參考由另一 filegdupload 函式準備授權 header 及所需傳送的參數, 送到 https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart 接收.

參考:

import requests

url = 'https://osa.nfu.edu.tw/query/studlist_ajax.php'
post_var = {'pselyr': semester, 'pseqno': courseno}

result = requests.post(url, data = post_var)

#####################################

import json
import requests

headers = {"Authorization": "Bearer " + ACCESS_TOKEN}

metadata = {
    'name': fileName,
    'mimeType': mimeType,
    # 注意: 必須提供數列格式資料
    'parents': [folderID]
    }

filename = request.args.get("ax-file-name")

files = {
    "data": ("metadata", json.dumps(metadata), "application/json; charset=UTF-8"),
    "file": request.stream.read()
}

response = requests.post("https://www.googleapis.com/upload/drive/v2/files?  uploadType=multipart", headers=headers, files=files)

return response 

#####################################


import json
import requests
headers = {"Authorization": "Bearer ### access token ###"}
para = {
    "name": "sample.png",
    "parents": ["### folder ID ###"]
}
files = {
    'data': ('metadata', json.dumps(para), 'application/json; charset=UTF-8'),
    'file': open("./sample.png", "rb")
}
r = requests.post(
    "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
    headers=headers,
    files=files
)
print(r.text)</t>
<t tx="yen.20200528001940.1"># 希望直接由 browser client 將檔案以 chunked 大小送往 GD 儲存
@login_required
@app.route('/filegdupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def filegdupload():
    
    with open('./../gdrive_write_token.pickle', 'rb') as token:
        gdrive = pickle.load(token, encoding='utf-8')

    with open("./../gdrive_uploaded_id.txt", 'r') as content_file:
        folderID = content_file.read()

    #print(gdrive.token)
    ACCESS_TOKEN = gdrive.token
    # need to consider if the uploaded filename already existed.
    # right now all existed files will be replaced with the new files
    fileName = request.args.get("ax-file-name")
    
    headers = {"Authorization": "Bearer " + ACCESS_TOKEN}
    mimeType = mimetypes.MimeTypes().guess_type(fileName)[0]
    metadata = {
        'name': fileName,
        'mimeType': mimeType,
        # 注意: 必須提供數列格式資料
        'parents': [folderID]
        }

    files = {
    "data": ("metadata", json.dumps(metadata), "application/json; charset=UTF-8"),
    "file": request.stream.read()
    }

    response = requests.post("https://www.googleapis.com/upload/drive/v2/files", headers=headers, files=files)

    #return response 
    '''
    flag = request.args.get("start")
    if flag == "0":
        file = open(_curdir + "/downloads/" + filename, "wb")
    else:
        file = open(_curdir + "/downloads/" + filename, "ab")
    file.write(request.stream.read())
    file.close()
    '''
    return "files uploaded!"
    </t>
<t tx="yen.20200529215216.1">from oauth2client.client import flow_from_clientsecrets
import httplib2
from apiclient.discovery import build
from oauth2client.file import Storage
import webbrowser

def get_credentials():
    scope = 'https://www.googleapis.com/auth/blogger'
    flow = flow_from_clientsecrets(
        'client_secrets.json', scope,
        redirect_uri='urn:ietf:wg:oauth:2.0:oob')
    storage = Storage('credentials.dat')
    credentials = storage.get()

    if  not credentials or credentials.invalid:
        auth_uri = flow.step1_get_authorize_url()
        webbrowser.open(auth_uri)
        auth_code = input('Enter the auth code: ')
        credentials = flow.step2_exchange(auth_code)
        storage.put(credentials)
    return credentials

def get_service():
    """Returns an authorised blogger api service."""
    credentials = get_credentials()
    http = httplib2.Http()
    http = credentials.authorize(http)
    service = build('blogger', 'v3', http=http)
    return service

if __name__ == '__main__':
    served = get_service()
    blogs = served.blogs()
    blog_get_obj = blogs.get(blogId='123456789123456')
    details = blog_get_obj.execute()
    print(details)</t>
<t tx="yen.20200529215344.1">import os
import pickle

from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

SCOPES = ['https://www.googleapis.com/auth/calendar.readonly', ]


# we check if the file to store the credentials exists
if not os.path.exists('credentials.dat'):

    flow = InstalledAppFlow.from_client_secrets_file('client_id.json', SCOPES)
    credentials = flow.run_local_server()

    with open('credentials.dat', 'wb') as credentials_dat:
        pickle.dump(credentials, credentials_dat)
else:
    with open('credentials.dat', 'rb') as credentials_dat:
        credentials = pickle.load(credentials_dat)

if credentials.expired:
    credentials.refresh(Request())

calendar_sdk = build('calendar', 'v3', credentials=credentials)

calendars_get_params = {
        'calendarId': 'primary',
    }

test = calendar_sdk.calendars().get(**calendars_get_params).execute()
print(test)</t>
<t tx="yen.20200531203803.1">https://stackoverflow.com/questions/8287628/proxies-with-python-requests-module

# url to get the student number data
target_url = "http://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt"
# use requests to retrieve data from url
proxyDict = { "http": "http://proxy_server:port" }
try:
    f = requests.get(target_url)
except:
    f = requests.get(target_url, proxies=proxyDict)</t>
<t tx="yen.20200531204210.1">https://getbootstrap.com/

https://www.tutorialspoint.com/bootstrap4/index.htm

https://pikock.github.io/bootstrap-magic/

https://themestr.app/builder

http://shoelace.io/

https://bootsnipp.com/buttons</t>
<t tx="yen.20200601193216.1">https://www.makotemplates.org/

雖然 Mako 可以與 Jinja2 同時存在, 但仍希望逐步改為 Mako based</t>
</tnodes>
</leo_file>
